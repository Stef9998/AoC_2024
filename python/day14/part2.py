import utils as ut

from collections.abc import Iterator

from python.day14.utils import parse_lines, Robot
from python.file_handling import get_file_as_lines
from python.map_handling import Coordinate


def main(lines: list[str]) -> int:

    robots = parse_lines(lines)

    robot_generators = tuple(get_next_position(robot) for robot in robots)

    entropies_after_i_iterations = (
        (calculate_entropy(map(next, robot_generators)),i)
        for i in range(1, ut.map_width * ut.map_height)
    )

    lowest_entropy, iteration = min(entropies_after_i_iterations)

    return iteration


def get_next_position(robot: Robot) -> Iterator[Coordinate]:
    """
    Generates the next positions of a robot based on its initial position and velocity.

    :param robot: A Robot object containing initial position and velocity.
    :yield: The next Coordinate after applying the velocity in each iteration.
    """
    position = robot.initial_position
    velocity = robot.velocity
    while True:
        position = Coordinate(
            (position.x + velocity.x) % ut.map_width,
            (position.y + velocity.y) % ut.map_height
        )
        yield position


def calculate_entropy(coordinates: Iterator[Coordinate]) -> float:
    """
    Calculates a single measure combining the entropy and variance of the positions of the robots.
    This function computes the Shannon entropy of the positions and the variance of the coordinates,
    and combines them into a single float value.
    (This function was generated by GitHub Copilot.)

    :param coordinates: An iterator of Coordinate objects representing robot positions.
    :return: A single float value combining entropy and variance.
    """
    import math
    from collections import Counter

    coordinates = list(coordinates)
    # Count the occurrences of each position
    position_counts = Counter((coord.x, coord.y) for coord in coordinates)
    total_positions = sum(position_counts.values())

    # Calculate the probabilities of each position
    probabilities = [count / total_positions for count in position_counts.values()]

    # Calculate the entropy using Shannon's formula
    entropy = -sum(p * math.log2(p) for p in probabilities if p > 0)

    # Calculate the variance of the positions
    x_coords = [coord.x for coord in coordinates]
    y_coords = [coord.y for coord in coordinates]
    x_variance = sum((x - sum(x_coords) / len(x_coords)) ** 2 for x in x_coords) / len(x_coords)
    y_variance = sum((y - sum(y_coords) / len(y_coords)) ** 2 for y in y_coords) / len(y_coords)
    variance = (x_variance + y_variance) / 2  # Average variance for x and y

    # Combine entropy and variance into a single number
    combined_value = entropy * variance  # You can adjust this formula as needed

    return combined_value


if __name__ == '__main__':
    result = main(get_file_as_lines())
    # result = main(get_specific_file_as_lines('sample_input.txt'))
    print(f"Part two result:\n{result}")
    # assert result ==
